"use strict";
/*
 * Copyright (C) 2018-2022 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const streams_1 = require("../../../../src/util/streams");
const chai_1 = require("chai");
const streams_2 = require("../../../../src/util/streams");
const helpers_1 = require("../../../helpers");
describe("SortedStreamIntersection", () => {
    const comparator = (a, b) => a.toString().localeCompare(b.toString());
    it("returns all values if passed a single stream", (done) => {
        const a = (0, streams_2.splitStream)();
        const stream = new streams_1.SortedStreamIntersection([a], comparator);
        const output = [];
        stream.on("data", (v) => output.push(v.toString()));
        stream.on("end", () => {
            (0, chai_1.expect)(output).to.eql(["a", "b", "c"]);
            done();
        });
        a.write("a\nb\nc\n");
        a.end();
    });
    it("returns all values if passed identical streams", (done) => {
        const a = (0, streams_2.splitStream)();
        const b = (0, streams_2.splitStream)();
        const stream = new streams_1.SortedStreamIntersection([a, b], comparator);
        const output = [];
        stream.on("data", (v) => output.push(v.toString()));
        stream.on("end", () => {
            (0, chai_1.expect)(output).to.eql(["a", "b", "c"]);
            done();
        });
        a.write("a\nb\n");
        b.write("a\n");
        a.write("c\n");
        b.write("b\nc\n");
        a.end();
        b.end();
    });
    it("returns the intersection of two streams", (done) => {
        const a = (0, streams_2.splitStream)();
        const b = (0, streams_2.splitStream)();
        const stream = new streams_1.SortedStreamIntersection([a, b], comparator);
        const output = [];
        stream.on("data", (v) => output.push(v.toString()));
        stream.on("end", () => {
            (0, chai_1.expect)(output).to.eql(["b", "c"]);
            done();
        });
        a.write("a\nb\n");
        b.write("b\n");
        a.write("c\n");
        b.write("c\nd\n");
        a.end();
        b.end();
    });
    it("returns the intersection of three streams", (done) => {
        const a = (0, streams_2.splitStream)();
        const b = (0, streams_2.splitStream)();
        const c = (0, streams_2.splitStream)();
        const stream = new streams_1.SortedStreamIntersection([a, b, c], comparator);
        const output = [];
        stream.on("data", (v) => output.push(v.toString()));
        stream.on("end", () => {
            (0, chai_1.expect)(output).to.eql(["c", "d"]);
            done();
        });
        a.write("a\nb\nc\nd\n");
        b.write("b\nc\nd\ne\n");
        c.write("c\nd\ne\nf\n");
        a.end();
        b.end();
        c.end();
    });
    it("throws if passed a non-sorted stream", (done) => {
        const a = (0, streams_2.splitStream)();
        const b = (0, streams_2.splitStream)();
        const stream = new streams_1.SortedStreamIntersection([a, b], comparator);
        stream.on("data", () => { });
        stream.on("error", (err) => {
            (0, helpers_1.expectFuzzyMatch)(err.message, "Received unordered stream");
            done();
        });
        a.write("a\nb\nc\nd\ne\n");
        b.write("b\nd\nc\n");
        a.end();
        b.end();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0cmVhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCwwREFBdUU7QUFDdkUsK0JBQTZCO0FBQzdCLDBEQUEwRDtBQUMxRCw4Q0FBbUQ7QUFFbkQsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUN4QyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFFckYsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDMUQsTUFBTSxDQUFDLEdBQUcsSUFBQSxxQkFBVyxHQUFFLENBQUE7UUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQ0FBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQzVELE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQTtRQUMzQixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ25ELE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRTtZQUNwQixJQUFBLGFBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQ3RDLElBQUksRUFBRSxDQUFBO1FBQ1IsQ0FBQyxDQUFDLENBQUE7UUFDRixDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3BCLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNULENB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